twitter {
  version = "1.1"

  auth {
    consumerTokenKey = ${TWITTER_CONSUMER_TOKEN_KEY}
    consumerTokenSecret = ${TWITTER_CONSUMER_TOKEN_SECRET}

    accessTokenKey = ${TWITTER_ACCESS_TOKEN_KEY}
    accessTokenSecret = ${TWITTER_ACCESS_TOKEN_SECRET}
  }

  rest {
    api = "https://api.twitter.com"
    media = "https://upload.twitter.com"
  }

  streaming {
    public = "https://stream.twitter.com"
    user = "https://userstream.twitter.com"
    site = "https://sitestream.twitter.com"
  }

  // List of followed twitter users ids. Use http://gettwitterid.com/
  followed = [877728873340956672, //"VentureCoinist"
    3179873194, // CryptoHustle
    717191666629795840, // Dmitriysz
  ]

  // List of tracked keywords
  tracks = []
}

reddit {
  clientId = ${REDDIT_CLIENT_ID}
  clientSecret = ${REDDIT_CLIENT_SECRET}
  userAgent = ${REDDIT_USER_AGENT}
  username = ${REDDIT_USERNAME}
  password = ${REDDIT_PASSWORD}
  polling-interval = 300000 //milliseconds = 5 minutes

  subs = ["CryptoCurrency", "Crypto_Currency_News", "CryptoMarkets", "CryptoCurrencyTrading", "CryptoTechnology"]
}

cryptocontrol {
  apiKey = ${CRYPTOCONTROL_API}

  polling-interval = 300000 //milliseconds = 5 minutes
}

rss {
  feeds = [
    "https://www.coindesk.com/feed/",
    "https://blog.blockchain.com/rss/",
    "https://cointelegraph.com/rss",
    "https://cryptocurrencynews.com/feed/"
  ]

  polling-interval = 300000 //milliseconds = 5 minutes
}

aggregating-actor {
  refresh-interval = 30000 // 30000 milliseconds = 30 seconds
  snapshot-interval-msgs = 100
}

top-n-actor {
  snapshot-interval-msgs = 100
  capacity = 15
}

akka {
  extensions = [akka.persistence.Persistence, "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    default-mailbox.stash-capacity = 10000
    allow-java-serialization = on
    enable-additional-serialization-bindings = on

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "scala.collection.immutable.Vector" = kryo
      "scala.collection.immutable.List" = kryo
      "java.io.Serializable" = kryo
      "finrax.actor.topn.State" = java
      "finrax.actor.aggregator.State" = kryo
      "finrax.clients.twitter.domain.entities.Tweet" = kryo
      "finrax.clients.rssfeed.RssFeedEntry" = kryo
      "client.reddit.domain.RedditPost" = kryo
      "finrax.client.cryptocontrol.domain.Article" = kryo
      "finrax.client.cryptocontrol.domain.Coin" = kryo
      "finrax.client.cryptocontrol.domain.SimilarArticle" = kryo
      "finrax.clients.twitter.domain.entities.User" = kryo
    }

    kryo  {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "graph"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. This strategy was
      # added in version 0.4.1 and will not work with the previous versions

      idstrategy = "incremental"

      # Define a default queue builder, by default ConcurrentLinkedQueue is used.
      # Create your own queue builder by implementing the trait QueueBuilder,
      # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
      #
      # If you pass a bounded queue make sure its capacity is equal or greater than the
      # maximum concurrent remote dispatcher threads your application will ever have
      # running; failing to do this will have a negative performance impact:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = "off"

      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = on

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = true

      # If provided, Kryo uses the class specified by a fully qualified
      # class name to perform a custom initialization of Kryo instances in
      # addition to what is done automatically based on the config file.
      kryo-custom-serializer-init = "finrax.serializaiton.KryoInit"
    }
  }

  persistence {
        journal {
          plugin = "jdbc-journal"
          auto-start-journals = ["jdbc-journal"]
        }
        snapshot-store {
          plugin = "jdbc-snapshot-store"
          auto-start-snapshot-stores = ["jdbc-snapshot-store"]
        }
  }

}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = "localhost"
    host = ${?POSTGRES_HOST}
    url = "jdbc:postgresql://127.0.0.1:5432/postgres?reWriteBatchedInserts=true"
    user = "postgres"
    user = ${?POSTGRES_USER}
    password = "postgres"
    password = ${?POSTGRES_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}